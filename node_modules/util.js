module.exports = {
    isNum: function(n) {
        return typeof n === "number" && isFinite(n);
    },
    isVec: function(v) {
        return v && this.isNum(v.x) && this.isNum(v.y);
    },
    vecAdd: function(a, b) {
        return {
            x: a.x + b.x,
            y: a.y + b.y
        }
    },
    vecAddTo: function(a, v) {
        a.x += v.x;
        a.y += v.y;
    },
    vecSub: function(a, b) {
        return {
            x: a.x - b.x,
            y: a.y - b.y
        }
    },
    vecMul: function(v, m) {
        return {
            x: v.x * m,
            y: v.y * m
        }
    },
    vecMulBy: function(v, m) {
        v.x *= m;
        v.y *= m;
    },
    vecDiv: function(v, d) {
        return {
            x: d == 0 ? 0 : v.x / d,
            y: d == 0 ? 0 : v.y / d
        }
    },
    vecEq: function(a, b) {
        return a.x == b.x && a.y == b.y;
    },
    vecLen: function(v) {
        return Math.sqrt(v.x * v.x + v.y * v.y);
    },
    vecDist: function(a, b) {
        var diff = this.vecSub(b, a);
        return this.vecLen(diff);
    },
    vecNorm: function(v, len) {
        len = len || this.vecLen(v);
        return this.vecDiv(v, len);
    },
    vecDir: function(a, b) {
        if (this.vecEq(a, b)) {
            return {
                x: 1,
                y: 0
            };
        }
        var diff = this.vecSub(b, a);
        return this.vecNorm(diff);
    },
    vecCopy: function(v) {
        return {
            x: v.x,
            y: v.y
        }
    },
    vecRandom: function(maxLen) {
        var a = this.random(Math.PI * 2);
        var v = {
            x: Math.cos(a),
            y: Math.sin(a)
        };
        maxLen = maxLen || 1;
        this.vecMulBy(v, this.random(maxLen));
        return v;
    },
    random: function(max) {
        return Math.random() * max;
    },
    randomRange: function(min, max) {
        return min + Math.random() * (max - min);
    },
    randomFromList: function(list) {
        return list[Math.floor(this.random(list.length))];
    },
    checkRange: function(a, b, max) {
        var diff = this.vecSub(b, a);
        return max * max >= (diff.x * diff.x + diff.y * diff.y);
    },
    checkBounds: function(position, bounds) {
        return position.x >= bounds.x && position.x <= bounds.width &&
            position.y >=
            bounds.y && position.y <= bounds.height
    },
    time: function() {
        return new Date().getTime() / 1000;
    },
    timeSince: function(time) {
        return time ? this.time() - time : Number.MAX_VALUE;
    }
}
